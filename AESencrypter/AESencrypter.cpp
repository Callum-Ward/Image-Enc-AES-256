#include <iostream>
#include <fstream>
#include <string>
#include <math.h>
#include "sha256.h"
#include <ctime>
#include <cstdlib>
 
class AES256_CBC {

public:

	AES256_CBC(std::string fileName, std::string newFileName, std::string password,bool encOrDec)
	{
		int fileSize;
		const int rnds = 14;
		fileSize = GetImageSize(fileName); //size of file needs to be known for import to be successful 
		std::string pass = password;


		if (!fileSize == 0) //file size == 0 when it could not be found 
		{
			std::cout << "Importing image: ";
			char* image;
			int blockIncrease;

			if (encOrDec)//image array declaration for enc and dec
			{
				
				if (fileSize % 32 == 0) // padding declaration
				{
					blockIncrease = 32;
				}
				else
				{
					blockIncrease = 32 - (fileSize % 32);
				}

				image = new char[(fileSize + blockIncrease + 32)]; // full block padding added to start of stream & final block padding to complete block

			}
			else
			{
				image = new char[fileSize]; 
			}
		
		

			if (ImportImage(fileName, image, fileSize)) //importing image to array
			{

				if (encOrDec) //  encrypting
				{

					ImagePad(image, fileSize, blockIncrease); // filling intialised padding space

					fileSize += (32+blockIncrease);
					srand((unsigned)time(0));

					for (int i = 1; i <= fileSize; ++i)
					{
						if (fileSize -i < 32) //first 32 bytes or array
						{
							image[fileSize - i] = (char)rand() % 256;    // randmomly generating unrecoverable 32 byte starting block for salt
						}
						else //all locations that need shifiting
						{
							image[fileSize - i] = image[fileSize - 32 - i]; //Shifting all bits to the right 32 places to make space for random start block
						}

					}

					int rkeyLength = (fileSize * 15); //15 keys required per encryption block
					unsigned char* roundKeys{ new unsigned char[rkeyLength] {} };
					KeyExpansion(roundKeys, pass, rkeyLength);





					int noOfBlocks = fileSize / 32;

					for (int blockNo = 0; blockNo < noOfBlocks; ++blockNo) //main encryption loop
					{
				

						unsigned char state[32];

						for (int pos = blockNo * 32; pos < blockNo * 32 + 32; ++pos) //loading state
						{
							if (blockNo == 0)
							{
								state[pos - (blockNo * 32)] = image[pos]; //First block doesn't require XOR as it's randomised for salt
							}
							else
							{
								state[pos - (blockNo * 32)] = image[pos] ^ image[pos-32]; //XOR with previous encryption block
							}
						}


						for (int blockEnc = 0; blockEnc < 14; ++blockEnc) //14 rounds
						{
							SubBytes(state);
							ShiftRows(state);
							MixColumns(state);
							AddRoundKey(state, roundKeys,blockNo,blockEnc);
						}

						SubBytes(state);
						ShiftRows(state);
						AddRoundKey(state, roundKeys, blockNo,14);

						for (int pos = blockNo*32; pos < (blockNo *32) +32; ++pos) //unload state
						{
							image[pos] = state[pos - (blockNo * 32)];
						}


					}

					ExportImage(newFileName,image, fileSize);

				}
				else //   decrypting
				{
					int rkeyLength = (fileSize * 15); //15 keys required per encryption block
					unsigned char* roundKeys{ new unsigned char[rkeyLength] {} };
					KeyExpansion(roundKeys, pass, rkeyLength);

					int noOfBlocks = fileSize / 32;

					unsigned char state[32];
					

					for (int blockNo = 1; blockNo < noOfBlocks; ++blockNo) //main decryption loop, start from the end of the image and work backwards
					{

						for (int blockPos = 0; blockPos < 32; ++blockPos) //load state
						{
							state[blockPos] = image[(noOfBlocks - blockNo) * 32 + blockPos];
						}

						AddRoundKey(state, roundKeys, noOfBlocks - blockNo,14);
						InvShiftRows(state);
						InvSubBytes(state);

						for (int blockEnc = 13; blockEnc >=0; --blockEnc)
						{
							AddRoundKey(state, roundKeys, noOfBlocks - blockNo, blockEnc);
							InvMixColumns(state);
							InvShiftRows(state);
							InvSubBytes(state);

						}

						for (int pos = 0; pos < 32; pos++) // XOR with previous encrypted block and unload state
						{
								image[(noOfBlocks - blockNo) * 32 + pos] = state[pos] ^ image[(noOfBlocks - blockNo) * 32 - 32 + pos];
						}

						

					}


					char* decryptedImage;
					decryptedImage = new char[fileSize - 32];

					for (int pos = 32; pos < noOfBlocks * 32; ++pos)
					{
						decryptedImage[pos - 32] = image[pos];
					}

					fileSize -= 32;

					ExportImage(newFileName, decryptedImage, fileSize);


				}				

			}


		}
	}

private:

	void SubBytes(unsigned char* state)
	{
		for (int pos = 0; pos < 32; ++pos)
		{
			state[pos] = sbox[(int)state[pos]];
		}
	}

	void InvSubBytes(unsigned char* state)
	{
		for (int pos = 0; pos < 32; ++pos)
		{
			state[pos] = sboxinv[(int)state[pos]];
		}
	}

	void ShiftRows(unsigned char* state)
	{
		//row 2
		unsigned char temp = state[1];
		state[1] = state[5]; state[5] = state[9]; state[9] = state[13]; state[13] = state[17];
		state[17] = state[21]; state[21] = state[25]; state[25] = state[29]; state[29] = temp;
		//row 3
		int temp1 = state[6];
		temp = state[2]; state[2] = state[10]; state[6] = state[14]; state[10] = state[18];
		state[14] = state[22]; state[18] = state[26]; state[22] = state[30]; state[26] = temp; state[30] = temp1;
		//row 4
		int temp2 = state[11];
		temp1 = state[7];
		temp = state[3]; state[3] = state[15]; state[7] = state[19]; state[11] = state[23];
		state[15] = state[27]; state[19] = state[31]; state[23] = temp; state[27] = temp1; state[31] = temp2;
	}

	void InvShiftRows(unsigned char* state)
	{
		//row 2
		unsigned char temp = state[29];
		state[29] = state[25]; state[25] = state[21]; state[21] = state[17]; state[17] = state[13];
		state[13] = state[9]; state[9] = state[5]; state[5] = state[1]; state[1] = temp;
		//row 3
		int temp1 = state[26];
		temp = state[30]; state[30] = state[22]; state[26] = state[18]; state[22] = state[14];
		state[18] = state[10]; state[14] = state[6]; state[10] = state[2]; state[6] = temp; state[2] = temp1;
		//row 4
		int temp2 = state[23];
		temp1 = state[27];
		temp = state[31]; state[31] = state[19]; state[27] = state[15]; state[23] = state[11];
		state[19] = state[7]; state[15] = state[3]; state[11] = temp; state[7] = temp1; state[3] = temp2;
	}

	void MixColumns(unsigned char* state)
	{
		// Mix Matrix
		// 2 3 1 1
		// 1 2 3 1
		// 1 1 2 3
		// 3 1 1 2

		unsigned char tempState[32];
		
		// longer hardcoding method 

		/*tempState[0] = mul2[state[0]] ^ state[1] ^ state[2] ^ mul3[state[3]];
		tempState[4] = mul2[state[4]] ^ state[5] ^ state[6] ^ mul3[state[7]];
		tempState[8] = mul2[state[8]] ^ state[9] ^ state[10] ^ mul3[state[11]];
		tempState[12] = mul2[state[12]] ^ state[13] ^ state[14] ^ mul3[state[15]];
		tempState[16] = mul2[state[16]] ^ state[17] ^ state[18] ^ mul3[state[19]];
		tempState[20] = mul2[state[20]] ^ state[21] ^ state[22] ^ mul3[state[23]];
		tempState[24] = mul2[state[24]] ^ state[25] ^ state[26] ^ mul3[state[27]];
		tempState[28] = mul2[state[28]] ^ state[29] ^ state[30] ^ mul3[state[31]];*/
		
		for (int x = 0; x < 4; ++x)
		{
			for (int y = 0; y < 8; ++y)
			{
				if (x == 0)
				{
					tempState[x + y*4] = mul2[state[y*4]] ^ mul3[state[(y * 4)+1]] ^ state[(y * 4)+2] ^ state[(y * 4)+3];
				}
				else if (x == 1)
				{
					tempState[x + y*4] = state[y * 4] ^ mul2[state[(y * 4) + 1]] ^ mul3[state[(y * 4) + 2]] ^ state[(y * 4) + 3];
				}
				else if (x == 2)
				{
					tempState[x + y * 4] = state[y * 4] ^ state[(y * 4) + 1] ^ mul2[state[(y * 4) + 2]] ^ mul3[state[(y * 4) + 3]];
				}
				else if (x == 3)
				{
					tempState[x + y * 4] = mul3[state[y * 4]] ^ state[(y * 4) + 1] ^ state[(y * 4) + 2] ^ mul2[state[(y * 4) + 3]];
				}


			}
		}

		state = tempState;
		

	}

	void InvMixColumns(unsigned char* state)
	{
		unsigned char tempState[32];

		/*
			Inverse Matrix

			14 11 13 9
			9  14 11 13
			13 9  14 11
			11 13 9  14
		*/

		for (int x = 0; x < 4; ++x)
		{
			for (int y = 0; y < 8; ++y)
			{
				if (x == 0)
				{
					tempState[x + y * 4] = mul14[state[y * 4]] ^ mul11[state[(y * 4) + 1]] ^ mul13[state[(y * 4) + 2]] ^ mul9[state[(y * 4) + 3]];
				}
				else if (x == 1)
				{
					tempState[x + y * 4] = mul9[state[y * 4]] ^ mul14[state[(y * 4) + 1]] ^ mul11[state[(y * 4) + 2]] ^ mul13[state[(y * 4) + 3]];
				}
				else if (x == 2)
				{
					tempState[x + y * 4] = mul13[state[y * 4]] ^ mul9[state[(y * 4) + 1]] ^ mul14[state[(y * 4) + 2]] ^ mul11[state[(y * 4) + 3]];
				}
				else if (x == 3)
				{
					tempState[x + y * 4] = mul11[state[y * 4]] ^ mul13[state[(y * 4) + 1]] ^ mul9[state[(y * 4) + 2]] ^ mul14[state[(y * 4) + 3]];
				}


			}
		}
		state = tempState;

	}

	void AddRoundKey(unsigned char* state, unsigned char* roundKeys, int blockNo, int iterationNo)
	{
		for (int pos = 0; pos < 32; ++pos)
		{
			state[pos] ^= roundKeys[blockNo*(32*15) + (iterationNo * 32) + pos];
		}
	}

	void PrintState(unsigned char* state)
	{
		for (int i = 0; i < 4; ++i)
		{
			for (int x = 0; x < 8; ++x)
			{
				std::cout << "( " << state[i + (x * 4)] << " )";
			}
			std::cout << std::endl;
		}
		std::cout << std::endl;
	}

	void ImagePad(char* image, int fileSize, int blockIncrease) // Padding
	{
		int lastBit = (int)(unsigned char)image[fileSize - 1]; 
		if (lastBit % 2 == 1) //Opposite of least significant bit of last byte in stream used to differentiate between padding and useful data when decrypting 
		{
			lastBit = 0;
		}
		else
		{
			lastBit = 255;
		}
		
		for (int i = fileSize; i < fileSize + blockIncrease; ++i)
		{
			image[i] = (char)lastBit;
		}

		
	}

	void KeyExpansion(unsigned char* rkeys, std::string pass, int rkeyLegnth)
	{
		std::string hexPass;
		sha256::hash256_hex_string(pass, hexPass); //user string input converted to 256 bit 64 character hex string stored in hexPass


		for (int i = 0; i < hexPass.length(); i += 2) //Convert 64 character hex string to 32 character char array
		{
			std::string byte = hexPass.substr(i, 2);
			//std::cout << byte << " = ";
			char chr = (char)(int)strtol(byte.c_str(), NULL, 16);
			rkeys[i] = chr;
			//std::cout << rkeys[i] << std::endl;
		}

		int word = 9;
		unsigned char* prevWord{ new unsigned char[4] {} };

		for (int pos = 32; pos < rkeyLegnth; pos += 4) //key gen loop
		{

 			if (word % 8 == 1)
			{
				LoadPrevWord(rkeys, prevWord, pos);
				RotateWordForKey(prevWord, 0);
				RCon(prevWord, 0);
				SubWordForKey(prevWord, 0);
				WriteWord(rkeys, prevWord, pos);

			}
			else if (word % 8 == 5)
			{
				LoadPrevWord(rkeys, prevWord, pos);
				SubWordForKey(prevWord, 0);
				WriteWord(rkeys, prevWord, pos);
			}
			else
			{
				rkeys[pos] = rkeys[pos - 4] ^ rkeys[pos - 32];
				rkeys[pos+1] = rkeys[pos - 3] ^ rkeys[pos - 31];
				rkeys[pos+2] = rkeys[pos - 2] ^ rkeys[pos - 30];
				rkeys[pos+3] = rkeys[pos - 1] ^ rkeys[pos - 29];
			}
			//std::cout << "word " << word << ": " << (uint8_t)rkeys[pos] << " " << (uint8_t)rkeys[pos + 1] << " " << (uint8_t)rkeys[pos + 2] << " " << (uint8_t)rkeys[pos + 3] << std::endl;
			++word;
			
		}

		std::cout << "Round keys generated" << std::endl;

	}

	void RotateWordForKey(unsigned char* rkeys, int pos)
	{
		//std::cout << "pre-rotate: " << (uint8_t)rkeys[pos] << " " << (uint8_t)rkeys[pos + 1] << " " << (uint8_t)rkeys[pos + 2] << " " << (uint8_t)rkeys[pos + 3] << std::endl;

		char temp = rkeys[pos];
		rkeys[pos] = rkeys[pos + 1];
		rkeys[pos + 1] = rkeys[pos + 2];
		rkeys[pos + 2] = rkeys[pos + 3];
		rkeys[pos + 3] = temp;
		//std::cout << "post-rotate: " << (uint8_t)rkeys[pos] << " " << (uint8_t)rkeys[pos + 1] << " " << (uint8_t)rkeys[pos + 2] << " " << (uint8_t)rkeys[pos + 3] << std::endl;

	}
	
	void LoadPrevWord(unsigned char* rkeys,unsigned char* prevWord,int pos) 
	{
		prevWord[0] = rkeys[pos - 4];
		prevWord[1] = rkeys[pos - 3];
		prevWord[2] = rkeys[pos - 2];
		prevWord[3] = rkeys[pos - 1];

	}

	void WriteWord(unsigned char* rkeys, unsigned char* prevWord, int pos)
	{
		rkeys[pos] = prevWord[0] ^ rkeys[pos - 32];
		rkeys[pos + 1] = prevWord[1] ^ rkeys[pos - 31];
		rkeys[pos + 2] = prevWord[2] ^ rkeys[pos - 30];
		rkeys[pos + 3] = prevWord[3] ^ rkeys[pos - 29];
	}

	void SubWordForKey(unsigned char* rkeys, int pos)
	{
		
		int temp;
		for (int i = pos; i < pos + 4; ++i)
		{
			temp = rkeys[i];
			rkeys[i] = sbox[temp];
		}
		

	}

	void RCon(unsigned char* rkeys, int pos)
	{
		int currentRcon = floor((pos % 480) / 32)-1;
		//std::cout << "key byte start: | " << rkeys[pos] << " | Rcon to XOR with: | " << Rcon[currentRcon];
		rkeys[pos] = rkeys[pos] ^ Rcon[currentRcon];
		//std::cout << " | key byte after XOR: " << rkeys[pos] << std::endl;

	}

	int GetImageSize(std::string fileName)
	{
		try
		{
			std::ifstream in_file(fileName, std::ios::binary);
			in_file.seekg(0, std::ios::end);
			int fileSize = in_file.tellg(); //fileSize is number of bytes
			return fileSize;
		}
		catch (const std::exception & e)
		{
			std::cout << "Error: File size cannot be found.";
			return 0;
		}

	}

	bool ImportImage(std::string fileName,char* stockImage, int numOfElements)
	{

		try
		{

			std::fstream f;
			f.open(fileName, std::ios::in | std::ios::binary);

			if (f)
			{
				f.read(stockImage, numOfElements * sizeof(char));
				std::cout << "Image imported" << std::endl;
				return true;
			}
			else
			{
				std::cout << "Image reading failed" << std::endl;
				return false;
			}
			f.close();

		}
		catch (const std::exception & e)
		{
			std::cout << "Cannot find image" << std::endl;
			return false;

		}


	}

	void ExportImage(std::string newFileName ,char* encryptedImage, int numOfElements )
	{
		bool ok = false;
		while (!ok)
		{

			try
			{
				
				std::fstream f;
				f.open(newFileName, std::ios::out | std::ios::binary);

				if (f)
				{
					f.write(encryptedImage, numOfElements * sizeof(char));
					ok = true;
				}
				else
				{
					std::cout << "Cannot open file for writing";
				}
				f.close();

			}
			catch (const std::exception & e)
			{
				std::cout << "Error: Incorrect file name format inputed. Try again." << std::endl;

			}

		}


	}

	const unsigned char sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
	};

	const unsigned char sboxinv[256] = {
		0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
		0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
		0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
		0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
		0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
		0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
		0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
		0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
		0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
		0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
		0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
		0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
		0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
		0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
		0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
		0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
		0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
		0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
		0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
		0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
		0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
		0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
		0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
		0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
		0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
		0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
		0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
		0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
		0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
		0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
		0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
	};

	const unsigned char Rcon[255] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb };
	
	const unsigned char mul2[256] = {
		0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
		0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
		0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
		0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
		0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
		0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
		0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
		0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
		0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
		0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
		0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
		0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
		0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
		0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
		0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
		0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
	};
	
	const unsigned char mul3[256] = {
		0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
		0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
		0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
		0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
		0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
		0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
		0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
		0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
		0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
		0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
		0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
		0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
		0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
		0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
		0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
		0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
	};
	
	const unsigned char mul9[256] = {
		0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
		0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
		0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
		0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
		0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
		0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
		0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
		0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
		0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
		0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
		0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
		0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
		0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
		0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
		0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
		0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
	};
	
	const unsigned char mul11[256] = {
		0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
		0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
		0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
		0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
		0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
		0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
		0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
		0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
		0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
		0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
		0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
		0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
		0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
		0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
		0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
		0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
	};
	
	const unsigned char mul13[256] = {
		0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
		0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
		0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
		0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
		0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
		0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
		0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
		0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
		0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
		0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
		0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
		0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
		0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
		0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
		0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
		0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
	};
	
	const unsigned char mul14[256] = {
		0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
		0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
		0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
		0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
		0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
		0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
		0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
		0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
		0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
		0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
		0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
		0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
		0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
		0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
		0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
		0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
	};
};

int main()
{

	// "Ammo-chart.png"

	AES256_CBC test("EncryptedImage.png","UnencryptedImage.png" , "password", false);  // (imported file name), (exported file name), (encryption password), (true=encrypt , false=decrypt)

	std::cout << "Intialising AES256 object" << std::endl;


}


